{"version":3,"sources":["logo.svg","components/Clase2.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Clase2","date","Date","month","getMonth","toString","length","concat","displayedDate","getDay","getFullYear","react_default","a","createElement","className","href","React","Component","Home","src","logo","alt","react_router_dom","activeClassName","to","target","rel","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ad5afb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nimport './clase2.scss'\n\nclass Clase2 extends React.Component {\n\n  render() {\n\n    const date = new Date();\n    const month = (date.getMonth() + 1).toString().length === 1 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n    const displayedDate = `${date.getDay()}/${month}/${date.getFullYear()}`\n\n    return (\n      <div className='clase2-container container pt-5'>\n        <div className='grilla-actividad'>\n          <div className='row justify-content-center'>\n            <div className='col-10'>\n              <h1>Actividad del día {displayedDate}:</h1>\n              <p>Debemos crear una página Responsive utilizando el patrón de <b>Mobile First</b></p>\n              <p>Ademas necesitamos que sea responsive con 3 tamaños diferentes. Uno que sea para <b>teléfonos</b>, otro que sea para <b>tablets</b> y otro que sea para <b>Escritorio</b>. </p>\n            </div>\n          </div>\n          <div className='row justify-content-center'>\n            <div className='col-8'>\n              <p>Para cuando se visualiza desde el teléfono es necesario que se desplieguen 10 ítems en forma vertical. O sea 10 filas.</p>\n            </div>\n            <div className='w-100'></div>\n            <div className='col-3'>\n              <div className='custom-grid'>\n                <div className='custom-row'>Item 1</div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'></div>\n                <div className='custom-row'>Item 10</div>\n              </div>\n            </div>\n          </div>\n          <div className='row justify-content-center mt-3'>\n            <div className='col-8'>\n              <p>Para cuando se visualiza desde la tablet es necesario que se desplieguen 2 ítems por fila, o sea 5 filas.</p>\n            </div>\n            <div className='w-100'></div>\n            <div className='col-3'>\n              <div className='custom-grid row'>\n                <div className='custom-row col-6'>Item 1</div>\n                <div className='custom-row col-6'>Item 2</div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'></div>\n                <div className='custom-row col-6'>Item 10</div>\n              </div>\n            </div>\n          </div>\n          <div className='row justify-content-center mt-3'>\n            <div className='col-8'>\n              <p>Para cuando se visualiza desde el Escritorio es necesario que se desplieguen 5 ítems por fila, o sea 2 filas.</p>\n            </div>\n            <div className='w-100'></div>\n            <div className='col-6'>\n              <div className='row'>\n                <div className='custom-row col-2 offset-1'>Item 1</div>\n                <div className='custom-row col-2'>Item 2</div>\n                <div className='custom-row col-2'></div>\n                <div className='custom-row col-2'></div>\n                <div className='custom-row col-2'></div>\n                <div className='custom-row col-2 offset-1'></div>\n                <div className='custom-row col-2'></div>\n                <div className='custom-row col-2'></div>\n                <div className='custom-row col-2'></div>\n                <div className='custom-row col-2'>Item 10</div>\n              </div>\n            </div>\n          </div>\n          <div className='row justify-content-center'>\n            <div className='col-4 list-container'>\n              <ul>\n                <li>El trabajo es individual</li>\n                <li>El contenido de los items lo sacan de la siguiente página: <a href='https://getbootstrap.com/docs/4.1/layout/grid/'>Grids</a> </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Clase2;","import React from 'react'\n\nimport { NavLink } from 'react-router-dom'\n\nimport logo from '../logo.svg'\n\nimport './home.scss'\n\nclass Home extends React.Component {\n\n  render() {\n    return (\n      <header className=\"app-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Bienvenidos/as al curso de Desarrollo Web\n        </p>\n        <ul>\n          <li className='custom-nav-item-sytle'>\n            <NavLink activeClassName='active' to='/clase2'>\n              Clase2\n            </NavLink>\n          </li>\n        </ul>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport './styles.scss'\n\nimport Clase2 from './components/Clase2'\nimport Home from './components/Home'\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App app-container\">\n        <Router>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/clase2' component={Clase2}/>\n          </Switch>\n        </Router>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}